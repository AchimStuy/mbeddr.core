import org.apache.tools.ant.taskdefs.condition.Os

def script_test_mbeddrTutorial = new File(scriptsBasePath + "/com.mbeddr.tutorial/" + "build-tests.xml")
def script_test_mbeddrAnalysisTs = new File(scriptsBasePath + "/com.mbeddr.analyses/" + "build-ts-tests.xml")
def script_test_mbeddrAnalysisEx = new File(scriptsBasePath + "/com.mbeddr.analyses/" + "build-ex-tests.xml")
def script_test_mbeddrPerformance = new File(scriptsBasePath + "/com.mbeddr.core/" + "build-performance-tests.xml")
def script_test_mbeddrPlatform = new File(scriptsBasePath + "/com.mbeddr.platform/" + "build-ts-tests.xml")
def script_test_mbeddrDebugger = new File(scriptsBasePath + "/com.mbeddr.debugger/" + "build-tests.xml")
def script_test_mbeddrCoreEx = new File(scriptsBasePath + "/com.mbeddr.core/" + "build-ex-tests.xml")
def script_test_mbeddrCoreExLibrary = new File(scriptsBasePath + "/com.mbeddr.core/" + "build-aLibrary.xml")
def script_test_mbeddrCoreTs = new File(scriptsBasePath + "/com.mbeddr.core/" + "build-ts-tests.xml")
def script_test_mbeddrCcTs = new File(scriptsBasePath + "/com.mbeddr.cc/" + "build-ts-tests.xml")
def script_test_mbeddrCcEx = new File(scriptsBasePath + "/com.mbeddr.cc/" + "build-ex-tests.xml")
def script_test_mbeddrExtTs = new File(scriptsBasePath + "/com.mbeddr.ext/" + "build-ts-tests.xml")
def script_test_mbeddrExtEx = new File(scriptsBasePath + "/com.mbeddr.ext/" + "build-ex-tests.xml")
def cbmc_linux_tar = "cbmc-linux.tar.gz"
def cbmc_mac_zip = "cbmc-mac.zip"
def cbmc_win_zip = "cbmc-win.zip"



task test_mbeddr_tutorial(type: Exec, dependsOn: 'copy_allScripts') {
  workingDir rootProject.projectDir
  def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_test_mbeddrTutorial)), *test_targets])
  commandLine (args)
}

task build_mbeddr_analysis_ex(type: Exec, dependsOn: 'copy_allScripts') {
  workingDir rootProject.projectDir
  def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_test_mbeddrAnalysisEx)), *languages_targets])
  commandLine (args)
}

task test_mbeddr_analysis_ex << {
  ant.makeTests(workingDirectory: rootProject.projectDir.absolutePath + "/code/languages/com.mbeddr.analyses")
}

if(Os.isFamily(Os.FAMILY_UNIX) && !Os.isFamily(Os.FAMILY_MAC)) {
  test_mbeddr_analysis_ex.dependsOn 'unzip_cbmcLinuxTar'
} else if(Os.isFamily(Os.FAMILY_WINDOWS)) {
  test_mbeddr_analysis_ex.dependsOn 'unzip_cbmcWinZip'
} else {
  test_mbeddr_analysis_ex.dependsOn 'unzip_cbmcMacZip'
}

task test_mbeddr_analysis_ts(type: Exec, dependsOn: 'copy_allScripts') {
  workingDir rootProject.projectDir
  def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_test_mbeddrAnalysisTs)), *test_targets])
  commandLine (args)
}

task test_mbeddr_analysis(dependsOn: [test_mbeddr_analysis_ts, build_mbeddr_analysis_ex, test_mbeddr_analysis_ex]) { }



task test_mbeddr_performance(type: Exec, dependsOn: 'copy_allScripts') {
  workingDir rootProject.projectDir
  def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_test_mbeddrPerformance)), *test_targets])
  commandLine (args)
}

task test_mbeddr_platform(type: Exec, dependsOn: 'copy_allScripts') {
  workingDir rootProject.projectDir
  def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_test_mbeddrPlatform)), *test_targets])
  commandLine (args)
}

task test_mbeddr_debugger(type: Exec, dependsOn: 'copy_allScripts') {
  workingDir rootProject.projectDir
  def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_test_mbeddrDebugger)), *test_targets])
  commandLine (args)
}

task build_mbeddr_core_ex(type: Exec, dependsOn: 'copy_allScripts') {
    workingDir rootProject.projectDir
    def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_test_mbeddrCoreEx)), *languages_targets])
    commandLine(args)
}

task build_mbeddr_core_ex_library(type: Exec, dependsOn: 'copy_allScripts') {
    workingDir rootProject.projectDir
    def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_test_mbeddrCoreExLibrary)), *languages_targets])
    commandLine(args)
}

task test_mbeddr_core_ts(type: Exec, dependsOn: 'copy_allScripts') {
  workingDir rootProject.projectDir
  def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_test_mbeddrCoreTs)), *test_targets])
  commandLine (args)
}

task test_mbeddr_core_ex_library << {
  ant.makeTests(workingDirectory: rootProject.projectDir.absolutePath + "/code/languages/com.mbeddr.core/tests/aLibrary/source_gen/aLibrary/lib")
}

task test_mbeddr_core_ex << {
  ant.makeTests(workingDirectory: rootProject.projectDir.absolutePath + "/code/languages/com.mbeddr.core")
}

task test_mbeddr_core(dependsOn: [test_mbeddr_core_ex, test_mbeddr_core_ts]) {

}
test_mbeddr_core_ex_library.dependsOn build_mbeddr_core_ex
test_mbeddr_core_ex.dependsOn test_mbeddr_core_ex_library
test_mbeddr_core_ex_library.dependsOn build_mbeddr_core_ex_library

task test_mbeddr_cc_ex << {
  ant.makeTests(workingDirectory: rootProject.projectDir.absolutePath + "/code/languages/com.mbeddr.cc")
}

task build_mbeddr_cc_ex(type: Exec, dependsOn: 'copy_allScripts') {
  workingDir rootProject.projectDir
  def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_test_mbeddrCcEx)), *ex_tests_targets])
  commandLine (args)
}

task test_mbeddr_cc_ts(type: Exec, dependsOn: 'copy_allScripts') {
  workingDir rootProject.projectDir
  def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_test_mbeddrCcTs)), *test_targets])
  commandLine (args)
}

task test_mbeddr_cc(dependsOn: [build_mbeddr_cc_ex, test_mbeddr_cc_ex, test_mbeddr_cc_ts]) {}

task build_mbeddr_ext_ex(type: Exec, dependsOn: 'copy_allScripts') {
  workingDir rootProject.projectDir
  def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_test_mbeddrExtEx)), *languages_targets])
  commandLine (args)
}

task test_mbeddr_ext_ex << {
  ant.makeTests(workingDirectory: rootProject.projectDir.absolutePath + "/code/languages/com.mbeddr.ext")
}

task test_mbeddr_ext_ts(type: Exec, dependsOn: 'copy_allScripts') {
  workingDir rootProject.projectDir
  def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_test_mbeddrExtTs)), *test_targets])
  commandLine (args)
}

task test_mbeddr_ext(dependsOn: [build_mbeddr_ext_ex, test_mbeddr_ext_ex, test_mbeddr_ext_ts]) {}

task test_mbeddr(dependsOn: [test_mbeddr_debugger, test_mbeddr_platform, test_mbeddr_core, test_mbeddr_performance, test_mbeddr_tutorial, test_mbeddr_cc, test_mbeddr_ext]) {}

task resolve_cbmcLinux(type: Copy)  {
  from {
    configurations.cbmcLinux.collect { zipTree(it) }
  }
  into rootProject.projectDir.absolutePath + cbmc_resolveDir
}

task unzip_cbmcLinuxTar(type: Copy, dependsOn: resolve_cbmcLinux)  {
  from tarTree(rootProject.projectDir.absolutePath + cbmc_resolveDir + cbmc_linux_tar)
  into file(rootProject.projectDir.absolutePath + cbmc_resolveDir)
}

task resolve_cbmcMac(type: Copy)  {
  from {
    configurations.cbmcMac.collect { zipTree(it) }
  }
  into rootProject.projectDir.absolutePath + cbmc_resolveDir
}

task unzip_cbmcMacZip(type: Copy, dependsOn: resolve_cbmcMac)  {
  from zipTree(rootProject.projectDir.absolutePath + cbmc_resolveDir + cbmc_mac_zip)
  into file(rootProject.projectDir.absolutePath + cbmc_resolveDir)
}

task resolve_cbmcWin(type: Copy)  {
  from {
    configurations.cbmcWin.collect { zipTree(it) }
  }
  into rootProject.projectDir.absolutePath + cbmc_resolveDir
}

task unzip_cbmcWinZip(type: Copy, dependsOn: resolve_cbmcWin)  {
  from zipTree(rootProject.projectDir.absolutePath + cbmc_resolveDir + cbmc_win_zip)
  into file(rootProject.projectDir.absolutePath + cbmc_resolveDir)
}