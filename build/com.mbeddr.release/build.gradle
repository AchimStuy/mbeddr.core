def script_build_mbeddrDMG = new File(rootProject.projectDir.absolutePath + "/buildUtil/" + "build.xml")
def script_build_installer = new File(rootProject.projectDir.absolutePath + "/build/com.mbeddr.release/" + "build-installer.bat")


task resolveMacRCP(type: Copy) {
    from rootProject.projectDir.absolutePath + "/artifacts/mpsDistribution/"
    into rootProject.projectDir.absolutePath + "/buildUtil"
}

task package_dmg(type: Exec, dependsOn: resolveMacRCP) {
    workingDir rootProject.projectDir.absolutePath + "/buildUtil"
    def args = buildProcSpawnArgList(['ant', '-f', script_build_mbeddrDMG, 'macbuild'])
    commandLine (args)
}

task publish_mbeddr_dmg(type: Zip, dependsOn: package_dmg) {
    from rootProject.projectDir.absolutePath + "/buildUtil"
    include "*.dmg"
}

task copy_jdk(type: Copy) {
    from {
        zipTree(rootProject.projectDir.absolutePath + "/buildUtil/" + "jdk.zip")
    }
    into rootProject.projectDir.absolutePath + "/files/mbeddr/"
}

task copy_rcp(type: Copy) {
    from {
        zipTree(rootProject.projectDir.absolutePath + "/artifacts/mpsDistribution/" + "mbeddr-win.zip")
    }
    into rootProject.projectDir.absolutePath + "/files/"
}

task resolve_cbmcWinForInstaller(type: Copy)  {
    from {
        configurations.cbmcWin.collect { zipTree(it) }
    }
    into rootProject.projectDir.absolutePath + "/artifacts/cbmc"
}

task unzip_cbmcWinZipForInstaller(type: Copy, dependsOn: resolve_cbmcWinForInstaller)  {
    from zipTree(rootProject.projectDir.absolutePath + "/artifacts/cbmc/"+ "cbmc-win.zip")
    into file(rootProject.projectDir.absolutePath + "/files/3rd-party/cbmc")
}

task unzip_nsis(type: Copy) {
    from(zipTree(rootProject.projectDir.absolutePath + "/NSIS/NSIS.zip")) { }
    into rootProject.projectDir.absolutePath + "/NSIS/"
}

task build_installer(type: Exec, dependsOn: ['copy_jdk', 'copy_rcp', 'unzip_nsis', 'unzip_cbmcWinZipForInstaller']) {
    workingDir rootProject.projectDir.absolutePath
    commandLine 'cmd', '/C', 'start', 'NSIS\\NSIS\\makensis.exe', 'mbeddr.nsi'
}

task publish_installer(type: Zip, dependsOn: build_installer) {
    from rootProject.projectDir.absolutePath
    include "*.exe"
}