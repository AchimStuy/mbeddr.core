def script_build_slAll = new File(scriptsBasePath + "/sl-all/" + "build.xml")
def script_build_spawner = new File(scriptsBasePath + "/com.mbeddr.build/" + "spawner.xml")
def script_build_platform = new File(scriptsBasePath + "/com.mbeddr.platform/" + "build.xml")
def script_build_mbeddr = new File(scriptsBasePath + "/com.mbeddr.build/" + "build.xml")

task build_sl_all(type: Exec, dependsOn: 'copy_allScripts') {
  workingDir rootProject.projectDir
  def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_build_slAll)), *languages_targets])
  commandLine (args)
}

task copy_sl_all_nativelibs(type: Copy, dependsOn: build_sl_all) {
  from zipTree(rootProject.projectDir.absolutePath + "/artifacts/mps-sl-all/mps-sl-all.zip")
  include "de.itemis.mps.nativelibs.loader/"
  into "MPS/MPS-mbeddr/plugins"
}

task build_spawner(type: Exec, dependsOn: copy_sl_all_nativelibs) {
  workingDir rootProject.projectDir
  def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_build_spawner)), *languages_targets])
  commandLine (args)
}

task copy_spawner(type: Copy, dependsOn: build_spawner) {
  from zipTree(rootProject.projectDir.absolutePath + "/artifacts/spawner/com.mbeddr.spawner.zip")
  into "MPS/MPS-mbeddr/plugins"
}

task build_platform(type: Exec, dependsOn: copy_spawner) {
  workingDir rootProject.projectDir
  def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_build_platform)), *languages_targets])
  commandLine (args)
}

task build_mbeddr(type: Exec, dependsOn: build_platform) {
  workingDir rootProject.projectDir
  def args = buildProcSpawnArgList([*dependsOnMbeddr_scriptArgs, *(antScriptLocation(script_build_mbeddr)), *languages_targets])
  commandLine (args)
}
