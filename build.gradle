subprojects {
    // required plugins
    apply plugin: 'java'
    apply plugin: "maven-publish"

    // mps properties
    ext.mpsMajor = "3.3"
    ext.mpsMinor = "4"
    ext.mpsBuild = mpsMajor + "." + mpsMinor
    ext.mbeddrMpsDir = "MPS-mbeddr-" + mpsBuild
    ext.mpsBaseUrl = "http://download.jetbrains.com/mps/33/"

    // mbeddr properties
    ext.mbeddrMajor = "0.9"
    ext.mbeddrMinor = "1"
    ext.mbeddrBuild = mbeddrMajor + "." + mbeddrMinor

    // cbmc properties
    ext.cbmcMajor = "0.9"
    ext.cbmcMinor = "1"
    ext.cbmcBuild = mbeddrMajor + "." + mbeddrMinor

    // download jre credentials
    ext.serverUser = project.hasProperty('serverUser') ? project.getProperty('serverUser') : '<user>'
    ext.serverPassword = project.hasProperty('serverPassword') ? project.getProperty('serverPassword') : '<password>'

    // ant targets
    ext.CleanGeneratedCode_Task = "cleanSources"
    ext.CleanPlugins_Task = "clean"
    ext.GenerateCode_Task = "generate"
    ext.BuildPlugin_Task = "assemble"
    ext.RunTests_Task = "check"
    ext.script_targets = ['clean', 'generate', 'assemble']
    ext.test_targets = ['clean', 'generate', 'assemble', 'check']
    ext.languages_targets = ['clean', 'generate', 'assemble']
    ext.rcp_targets = ['clean', 'build']

    // path variables
    ext.mps_home = '-Dmps.home=' + rootProject.projectDir.absolutePath + "/MPS/" + mbeddrMpsDir + "/"
    ext.build_dir = '-Dbuild.dir=' + rootProject.projectDir.absolutePath
    ext.artifacts_root = '-Dartifacts.root=' + rootProject.projectDir.absolutePath + "/artifacts"
    ext.mbeddr_home = '-Dmbeddr.github.core.home=' + rootProject.projectDir.absolutePath
    ext.slall_home = '-Dsl-all.home=' + rootProject.projectDir.absolutePath + '/code/plugins/sl-all'

    // path locations
    ext.mbeddrScripts_basePath = ant.properties['mbeddr.github.core.home'] + "/build"
    ext.allScripts_buildFileLocation = mbeddrScripts_basePath + "/" + "com.mbeddr.allScripts"
    ext.slAll_buildFileLocation = ant.properties['mbeddr.github.core.home'] + "/scripts" + "/" + "sl-all"

    // ant script locations
    ext.scriptsBasePath = rootProject.projectDir.absolutePath + "/scripts/"

    // repository urls
    ext.mps_repository = 'https://projects.itemis.de/nexus/content/repositories/mps_mbeddr_r'

    // repository
    repositories {
        maven {
            //url "$buildDir/repo"
            if(hasProperty('nexusUsername')) {
                credentials {
                    username nexusUsername
                    password nexusPassword
                }
            }
            url 'https://projects.itemis.de/nexus/content/repositories/mps_mbeddr_r'
        }
    }

    // configs
    configurations {
        mps{
            description = 'mps distribution'
        }
        mbeddrAllScripts {
            description = 'mbeddr build scripts'
        }
        mbeddrAllInOne {
            description = 'mbeddr allInOne'
        }
        mbeddrPlatform {
            description = 'mbeddr platform distribution'
        }
        mbeddrRcp {
            description = 'mbeddr rcp'
        }
        mbeddrJre {
            description = 'jre used for rcp'
        }
        mbeddrDmg {
            description = 'mbeddr dmg for mac'
        }
        cbmcWin {
            description = 'cbmc windows'
        }
        cbmcLinux {
            description = 'cbmc linux'
        }
        cbmcMac {
            description = 'cbmc mac'
        }
        mbeddrTutorial {
            description = 'mbeddr tutorial'
        }
    }

    task get_mps(type: Copy)  {
        from configurations.mps
        into rootProject.projectDir.absolutePath + "/MPS/"
    }

    task resolve_mps(type: Copy, dependsOn: get_mps)  {
        from zipTree(rootProject.projectDir.absolutePath + "/MPS/" + "mps-"+mpsBuild+".zip")
        into file(rootProject.projectDir.absolutePath + "/MPS/" + mbeddrMpsDir+ "/")
    }

    tasks.create(name: 'copy_allScripts', type: Copy, dependsOn: 'resolve_mps') {
        from rootProject.projectDir.absolutePath + "/build"
        include "*/*.xml"
        from rootProject.projectDir.absolutePath + "/code/plugins"
        include "*/*.xml"
        into rootProject.projectDir.absolutePath + "/scripts/"
    }

}

project(':build:com.jetbrains.mps') {
    publishing {

        publications {
            mps(MavenPublication) {
                groupId 'com.jetbrains'
                artifactId 'mps'
                version mpsBuild
                artifact(publishMPS) {}
            }
        }
        repositories {
            maven {
                if(hasProperty('nexusUsername')) {
                    credentials {
                        username nexusUsername
                        password nexusPassword
                    }
                }
                url 'https://projects.itemis.de/nexus/content/repositories/mps_mbeddr_r'
            }

        }
    }
}

project(':build:com.mbeddr.allScripts') {
    /*publishing {
        publications {
            mbeddrAllScripts(MavenPublication) {
                groupId 'com.mbeddr'
                artifactId 'allScripts'
                version mbeddrBuild
                artifact(publish_allScripts) {}
            }
        }
    }*/
    dependencies {
        //compile project(path: ':build:com.jetbrains.mps', configuration: 'mps')
        mps group: 'com.jetbrains', name: 'mps', version: mpsBuild
    }
}

project(':build:com.mbeddr.build') {
    dependencies {
        //compile project(path: ':build:com.mbeddr.allScripts', configuration: 'scripts' )
        //compile project(path: ':build:com.jetbrains.mps', configuration: 'mps')
        mps group: 'com.jetbrains', name: 'mps', version: mpsBuild
        //mbeddrAllScripts group: 'com.mbeddr', name: 'allScripts', version: mbeddrBuild
    }
    repositories {
        maven {
            url "$buildDir/repo"
        }
    }
}

project(':build:com.mbeddr.tests') {
    dependencies {
        //compile project(':build:com.jetbrains.mps')
        //compile project(':build:com.mbeddr.allScripts')
        //compile project(':build:com.mbeddr.build')
        mps group: 'com.jetbrains', name: 'mps', version: mpsBuild
        //mbeddrAllScripts group: 'com.mbeddr', name: 'allScripts', version: mbeddrBuild
        //mbeddr group: 'com.mbeddr', name: 'build', version: mbeddrBuild
    }
}

project(':build:com.mbeddr.platform') {
    dependencies {
        //compile project(':build:com.jetbrains.mps')
        //compile project(':build:com.mbeddr.allScripts')
        //compile project(':build:com.mbeddr.build')
        mps group: 'com.jetbrains', name: 'mps', version: mpsBuild
        //mbeddrAllScripts group: 'com.mbeddr', name: 'allScripts', version: mbeddrBuild
        //mbeddr group: 'com.mbeddr', name: 'build', version: mbeddrBuild
    }
    publishing {
        publications {
            mbeddrPlatform(MavenPublication) {
                groupId 'com.mbeddr'
                artifactId 'platform'
                version mbeddrBuild
                artifact(publish_mbeddrPlatform) {}
            }
        }
        repositories {
            maven {
                url "$buildDir/repo"
            }
        }
    }
}

project(':build:com.mbeddr.allInOne') {
    dependencies {
        //compile project(':build:com.jetbrains.mps')
        //compile project(':build:com.mbeddr.allScripts')
        //compile project(':build:com.mbeddr.build')
        mps group: 'com.jetbrains', name: 'mps', version: mpsBuild
        //mbeddrAllScripts group: 'com.mbeddr', name: 'allScripts', version: mbeddrBuild
        //mbeddr group: 'com.mbeddr', name: 'build', version: mbeddrBuild
    }
    publishing {
        publications {
            mbeddrAllInOne(MavenPublication) {
                groupId 'com.mbeddr'
                artifactId 'allInOne'
                version mbeddrBuild
                artifact(publish_all_in_one) {}
            }
        }
        repositories {
            maven {
                if(hasProperty('nexusUsername')) {
                    credentials {
                        username nexusUsername
                        password nexusPassword
                    }
                }
                url 'https://projects.itemis.de/nexus/content/repositories/mps_mbeddr_r'
            }
        }
    }
}

project(':build:com.mbeddr.rcp') {
    dependencies {
        //compile project(':build:com.jetbrains.mps')
        //compile project(':build:com.mbeddr.allScripts')
        //compile project(':build:com.mbeddr.build')  // dep. because of tutorial?
        //compile project(':build:com.mbeddr.allInOne')
        mps group: 'com.jetbrains', name: 'mps', version: mpsBuild
        //mbeddrAllScripts group: 'com.mbeddr', name: 'allScripts', version: mbeddrBuild
        //mbeddr group: 'com.mbeddr', name: 'build', version: mbeddrBuild
        mbeddrAllInOne group: 'com.mbeddr', name: 'allInOne', version: mbeddrBuild
    }
    publishing {
        publications {
            mbeddrRcp(MavenPublication) {
                groupId 'com.mbeddr'
                artifactId 'rcp'
                version mbeddrBuild
                artifact(publish_mbeddrRCP) {}
            }
            mbeddrJre(MavenPublication) {
                groupId 'com.mbeddr'
                artifactId 'jre'
                version mbeddrBuild
                artifact(publish_JRE) {}
            }
        }
        repositories {
            maven {
                url "$buildDir/repo"
            }
        }
    }
}

project(':build:com.mbeddr.release') {
    dependencies {
        //compile project(':build:com.mbeddr.allInOne')
        //compile project(':build:com.mbeddr.rcp')
        //compile project(':build:com.mbeddr.analyses.cbmc')
        //compile 'com.mbeddr:allInOne:0.9.1'
        //compile 'com.mbeddr:jre:0.9.1'
        //compile 'com.mbeddr:rcp:0.9.1'
        mbeddrJre group: 'com.mbeddr', name: 'jre', version: mbeddrBuild
        mbeddrRcp group: 'com.mbeddr', name: 'rcp', version: mbeddrBuild
        mbeddrAllInOne group: 'com.mbeddr', name: 'allInOne', version: mbeddrBuild
        cbmcMac group: 'org.cprover', name: 'cbmc-mac', version: cbmcBuild
        cbmcLinux group: 'org.cprover', name: 'cbmc-linux', version: cbmcBuild
        cbmcWin group: 'org.cprover', name: 'cbmc-win', version: cbmcBuild
    }
   /* publishing {
        publications {
            mbeddrDmg(MavenPublication) {
                groupId 'com.mbeddr'
                artifactId 'dmg'
                version mbeddrBuild
                artifact(publish_mbeddrDmg) {}
            }
        }
        repositories {
            maven {
                url "$buildDir/repo"
            }
        }
    }*/
}

project(':build:com.mbeddr.analyses.cbmc') {
    publishing {
        publications {
            cbmcMac(MavenPublication) {
                groupId 'org.cprover'
                artifactId 'cbmc-mac'
                version cbmcBuild
                artifact(publish_cbmcMac) {}
            }
            cbmcLinux(MavenPublication) {
                groupId 'org.cprover'
                artifactId 'cbmc-linux'
                version cbmcBuild
                artifact(publish_cbmcLinux) {}
            }
            cbmcWin(MavenPublication) {
                groupId 'org.cprover'
                artifactId 'cbmc-win'
                version cbmcBuild
                artifact(publish_cbmcWin) {}
            }
        }
    }
}

project(':build:com.mbeddr.tutorial') {
    dependencies {
        mps group: 'com.jetbrains', name: 'mps', version: mpsBuild
        //mbeddrAllScripts group: 'com.mbeddr', name: 'allScripts', version: mbeddrBuild
        //mbeddr group: 'com.mbeddr', name: 'build', version: mbeddrBuild
    }
    publishing {
        publications {
            mbeddrTutorial(MavenPublication) {
                groupId 'com.mbeddr'
                artifactId 'tutorial'
                version mbeddrBuild
                artifact(publish_mbeddrTutorial) {}
            }
        }
        repositories {
            maven {
                if(hasProperty('nexusUsername')) {
                    credentials {
                        username nexusUsername
                        password nexusPassword
                    }
                }
                url 'https://projects.itemis.de/nexus/content/repositories/mps_mbeddr_r'
            }
        }
    }
}
